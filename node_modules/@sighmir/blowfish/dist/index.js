"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.blowfish = exports.N = exports.P = exports.S = void 0;
const data_1 = require("./data");
const h = __importStar(require("./helper"));
exports.S = data_1.S;
exports.P = data_1.P;
exports.N = 16;
exports.blowfish = (key = "blowfish", schedule) => {
    const _key = Buffer.alloc((exports.N + 2) * 4).fill(key);
    const _schedule = schedule && h.bufferToUint32Array(schedule);
    const _P = _schedule
        ? _schedule.slice(0, exports.P.length)
        : new Uint32Array(exports.P);
    const _S = exports.S.map((_, i) => _schedule
        ? _schedule.slice(exports.P.length + exports.S[0].length * i, exports.P.length + exports.S[0].length * (i + 1))
        : new Uint32Array(exports.S[i]));
    const init = () => {
        for (let i = 0, j = 0; i < exports.N + 2; i++, j += 4) {
            const n = h.packFourBytes(_key[j], _key[j + 1], _key[j + 2], _key[j + 3]);
            _P[i] = h.xor(_P[i], n);
        }
        let xl = 0;
        let xr = 0;
        for (let i = 0; i < exports.N + 2; i += 2) {
            [xl, xr] = _encipher(xl, xr);
            _P[i] = xl;
            _P[i + 1] = xr;
        }
        for (let i = 0; i < 4; i++) {
            for (let j = 0; j < 256; j += 2) {
                [xl, xr] = _encipher(xl, xr);
                _S[i][j] = xl;
                _S[i][j + 1] = xr;
            }
        }
    };
    const F = (x) => {
        const [a, b, c, d] = h.unpackFourBytes(x);
        let y = h.sumMod32(_S[0][a], _S[1][b]);
        y = h.xor(y, _S[2][c]);
        return h.sumMod32(y, _S[3][d]);
    };
    const _encipher = (xl, xr) => {
        for (let i = 0; i < exports.N; i++) {
            xl = h.xor(xl, _P[i]);
            xr = h.xor(xr, F(xl));
            [xl, xr] = [xr, xl];
        }
        [xl, xr] = [xr, xl];
        xr = h.xor(xr, _P[exports.N]);
        xl = h.xor(xl, _P[exports.N + 1]);
        return [xl, xr];
    };
    const _decipher = (xl, xr) => {
        for (let i = exports.N + 1; i > 1; i--) {
            xl = h.xor(xl, _P[i]);
            xr = h.xor(xr, F(xl));
            [xl, xr] = [xr, xl];
        }
        [xl, xr] = [xr, xl];
        xr = h.xor(xr, _P[1]);
        xl = h.xor(xl, _P[0]);
        return [xl, xr];
    };
    const encipher = (data, offset = 0, length = data.length) => {
        let xl, xr;
        if (length % 8 != 0) {
            throw RangeError(`Invalid buffer length ${length}, must be multiple of 8`);
        }
        for (let i = offset; i < length + offset; i += 8) {
            // Encode the data in 8 byte blocks.
            xl = h.packFourBytes(data[i], data[i + 1], data[i + 2], data[i + 3]);
            xr = h.packFourBytes(data[i + 4], data[i + 5], data[i + 6], data[i + 7]);
            [xl, xr] = _encipher(xl, xr);
            // Now Replace the data.
            [data[i], data[i + 1], data[i + 2], data[i + 3]] = h.unpackFourBytes(xl);
            [data[i + 4], data[i + 5], data[i + 6], data[i + 7]] = h.unpackFourBytes(xr);
        }
    };
    const decipher = (data, offset = 0, length = data.length) => {
        let xl, xr;
        if (length % 8 != 0) {
            throw RangeError(`Invalid buffer length ${length}, must be multiple of 8`);
        }
        for (let i = offset; i < length + offset; i += 8) {
            // Encode the data in 8 byte blocks.
            xl = h.packFourBytes(data[i], data[i + 1], data[i + 2], data[i + 3]);
            xr = h.packFourBytes(data[i + 4], data[i + 5], data[i + 6], data[i + 7]);
            [xl, xr] = _decipher(xl, xr);
            // Now Replace the data.
            [data[i], data[i + 1], data[i + 2], data[i + 3]] = h.unpackFourBytes(xl);
            [data[i + 4], data[i + 5], data[i + 6], data[i + 7]] = h.unpackFourBytes(xr);
        }
    };
    init();
    return {
        encipher,
        decipher,
    };
};
exports.default = exports.blowfish;
//# sourceMappingURL=data:application/json;base64,